package $PACKAGE_NAME

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
#if (${VIEW_MODEL_INJECTION} == "Hilt")
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
#end
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
if (${AI_USED} == "true")
import kotlinx.coroutines.flow.update
#end

#if (${VIEW_MODEL_INJECTION} == "Hilt")
@HiltViewModel
#end
class ${NAME}ViewModel #if (${VIEW_MODEL_INJECTION} == "Hilt") @Inject constructor #end(
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val _stateFlow: MutableStateFlow<${NAME}State> = MutableStateFlow(${NAME}State())
  
    val stateFlow: StateFlow<${NAME}State> = _stateFlow.asStateFlow()


#if (${AI_USED} == "true")
${VM_ACTIONS}
#end

}