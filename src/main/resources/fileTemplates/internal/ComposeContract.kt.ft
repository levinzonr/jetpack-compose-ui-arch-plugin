package ${PACKAGE_NAME}

#if (${USE_PREVIEW_PARAMETER_PROVIDER} == "true")
import androidx.compose.ui.tooling.preview.PreviewParameterProvider
#end
#if ($NAVIGATION_ENABLED == "true" && $NAV_TYPE == "Kiwi")
import com.kiwi.navigationcompose.typed.Destination
import kotlinx.serialization.Serializable
#end

#if ($NAVIGATION_ENABLED == "true" && $NAV_TYPE == "Kiwi")
/**
 * Object used for a type safe destination to a ${NAME} route
 */
@Serializable
object ${NAME}${NAVIGATION_CLASS_SUFFIX} : Destination
#end


/**
 * UI State that represents ${NAME}Screen
**/
#if (${AI_USED} == "false")
    class ${NAME}State
#else
    data class ${NAME}State(
        ${STATE_PROPS}
    )
#end

/**
 * ${NAME} Actions emitted from the UI Layer
 * passed to the coordinator to handle
**/
#if (${ACTIONS_TYPE} == "Data")
data class ${NAME}Actions(
    #if (${AI_USED} == true)
        ${ACTIONS}
    #else
        val onClick: () -> Unit = {}
    #end
)
#end

#if (${ACTIONS_TYPE} == "Sealed")
sealed interface ${NAME}Action {
	#if (${AI_USED} == true)
		${SEALED_ACTIONS}
	#else
		data object OnClick : ${NAME}Action
	#end
}
#end

